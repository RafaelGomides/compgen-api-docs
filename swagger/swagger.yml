swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /api
paths:
  /document/:
    get:
      tags:
      - document
      description: get Document
      operationId: DocumentController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Document'
        "403":
          description: ""
    post:
      tags:
      - document
      description: create Document
      operationId: DocumentController.Post
      parameters:
      - in: body
        name: body
        description: body for Document content
        required: true
        schema:
          $ref: '#/definitions/models.Document'
      responses:
        "201":
          description: '{int} models.Document'
        "403":
          description: body is empty
  /document/{id}:
    get:
      tags:
      - document
      description: get Document by id
      operationId: DocumentController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Document'
        "403":
          description: :id is empty
    put:
      tags:
      - document
      description: update the Document
      operationId: DocumentController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Document content
        required: true
        schema:
          $ref: '#/definitions/models.Document'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Document'
        "403":
          description: :id is not int
    delete:
      tags:
      - document
      description: delete the Document
      operationId: DocumentController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /permissions/:
    get:
      tags:
      - permissions
      description: get Permissions
      operationId: PermissionsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permissions'
        "403":
          description: ""
    post:
      tags:
      - permissions
      description: create Permissions
      operationId: PermissionsController.Post
      parameters:
      - in: body
        name: body
        description: body for Permissions content
        required: true
        schema:
          $ref: '#/definitions/models.Permissions'
      responses:
        "201":
          description: '{int} models.Permissions'
        "403":
          description: body is empty
  /permissions/{id}:
    get:
      tags:
      - permissions
      description: get Permissions by id
      operationId: PermissionsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permissions'
        "403":
          description: :id is empty
    put:
      tags:
      - permissions
      description: update the Permissions
      operationId: PermissionsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Permissions content
        required: true
        schema:
          $ref: '#/definitions/models.Permissions'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permissions'
        "403":
          description: :id is not int
    delete:
      tags:
      - permissions
      description: delete the Permissions
      operationId: PermissionsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /serviceorder/:
    get:
      tags:
      - serviceorder
      description: get ServiceOrder
      operationId: ServiceOrderController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ServiceOrder'
        "403":
          description: ""
    post:
      tags:
      - serviceorder
      description: create ServiceOrder
      operationId: ServiceOrderController.Post
      parameters:
      - in: body
        name: body
        description: body for ServiceOrder content
        required: true
        schema:
          $ref: '#/definitions/models.ServiceOrder'
      responses:
        "201":
          description: '{int} models.ServiceOrder'
        "403":
          description: body is empty
  /serviceorder/{id}:
    get:
      tags:
      - serviceorder
      description: get ServiceOrder by id
      operationId: ServiceOrderController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ServiceOrder'
        "403":
          description: :id is empty
    put:
      tags:
      - serviceorder
      description: update the ServiceOrder
      operationId: ServiceOrderController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for ServiceOrder content
        required: true
        schema:
          $ref: '#/definitions/models.ServiceOrder'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ServiceOrder'
        "403":
          description: :id is not int
    delete:
      tags:
      - serviceorder
      description: delete the ServiceOrder
      operationId: ServiceOrderController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /services/:
    get:
      tags:
      - services
      description: get Services
      operationId: ServicesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Services'
        "403":
          description: ""
    post:
      tags:
      - services
      description: create Services
      operationId: ServicesController.Post
      parameters:
      - in: body
        name: body
        description: body for Services content
        required: true
        schema:
          $ref: '#/definitions/models.Services'
      responses:
        "201":
          description: '{int} models.Services'
        "403":
          description: body is empty
  /services/{id}:
    get:
      tags:
      - services
      description: get Services by id
      operationId: ServicesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Services'
        "403":
          description: :id is empty
    put:
      tags:
      - services
      description: update the Services
      operationId: ServicesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Services content
        required: true
        schema:
          $ref: '#/definitions/models.Services'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Services'
        "403":
          description: :id is not int
    delete:
      tags:
      - services
      description: delete the Services
      operationId: ServicesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /user/:
    get:
      tags:
      - user
      description: get User
      operationId: UserController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: ""
    post:
      tags:
      - user
      description: create User
      operationId: UserController.Post
      parameters:
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: '{int} models.User'
        "403":
          description: body is empty
  /user/{id}:
    get:
      tags:
      - user
      description: get User by id
      operationId: UserController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is empty
    put:
      tags:
      - user
      description: update the User
      operationId: UserController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
    delete:
      tags:
      - user
      description: delete the User
      operationId: UserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  models.Document:
    title: Document
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Name:
        type: string
      PrivateCopy:
        type: string
      PublicCopy:
        type: string
      ServiceOrder:
        $ref: '#/definitions/models.ServiceOrder'
      Status:
        type: string
      Type:
        type: string
      User:
        $ref: '#/definitions/models.User'
  models.Permissions:
    title: Permissions
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Type:
        type: string
  models.ServiceOrder:
    title: ServiceOrder
    type: object
    properties:
      Documents:
        type: array
        items:
          $ref: '#/definitions/models.Document'
      ID:
        type: integer
        format: int64
      Service:
        $ref: '#/definitions/models.Services'
      Status:
        type: string
  models.Services:
    title: Services
    type: object
    properties:
      ID:
        type: integer
        format: int64
      Name:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Cpf:
        type: string
      Documents:
        type: array
        items:
          $ref: '#/definitions/models.Document'
      Email:
        type: string
      ID:
        type: integer
        format: int64
      Name:
        type: string
      Password:
        type: string
      Permission:
        $ref: '#/definitions/models.Permissions'
tags:
- name: document
  description: |2
     DocumentController operations for Document
- name: permissions
  description: |2
     PermissionsController operations for Permissions
- name: serviceorder
  description: |2
     ServiceOrderController operations for ServiceOrder
- name: services
  description: |2
     ServicesController operations for Services
- name: user
  description: |2
     UserController operations for User
